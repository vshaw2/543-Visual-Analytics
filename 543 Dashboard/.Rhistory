sourceText='King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma)
title (main = "Gate Schedule Variance by Unit", xlab = "Unit", ylab = "Variance for Gate Schedule Dates- Anticipated vs. Actual")
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma)
titleText='Gate Schedule Variance by Unit'
sourceText='King County Road Services Division'
plot = jitterMEANs + labs(title=titleText, x=NULL, y=NULL, caption = sourceText)
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma)
titleText="Gate Schedule Variance by Unit"
sourceText="King County Road Services Division"
plot = jitterMEANs + labs(title=titleText, x=NULL, y=NULL, caption = sourceText)
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma)
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
plot = jitterMEANs + labs(title=titleText, x=NULL, y=NULL, caption = sourceText)
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma)
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
plot = jitterMEANs + labs(title='Gate Schedule Variance by Unit', x=NULL, y=NULL, caption = 'King County Road Services Division')
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance: Anticipated VS Actual")
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects")
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects")
+ theme(plot.title = element_text(hjust=0.5))
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects")
+ theme(plot.title = element_text(hjust=0.5)
plot2 = jitterMEANs + theme(plot.title = element_text(hjust=0.5)
titleText = 'Gate Schedule Variance by Unit'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
geo=read.csv("ESJ Map")
```{r}
library(tidyverse)
toris=read.csv("Geographic Data Roads Projects.csv")
str(toris)
categoryToSelect=c("Latitude","Longitude")
torisSubSet=toris[toris$Number%in%categoryToSelect,]
torisCompleteLocation=torisSubSet[complete.cases(torisSubSet),]
torisCompleteLocation
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(viridis)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(mapview)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
kc_demographics <- read_rds("kc_demographics.rds")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
kc_demographics <- read_rds("kc_demographics.rds")
#glimpse(kc_demographics, width = 100)
head(kc_demographics)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(sf)
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(sf)
kc_demographics <- read_rds("kc_demographics.rds")
#glimpse(kc_demographics, width = 100)
head(kc_demographics)
set.seed(23994)
vars <- c('med_income', 'p_e_less', 'percent_poc')#variables needed
equity_matrix <- cluster::daisy(kc_demographics[,vars])
res.pam <- cluster::pam(x=equity_matrix,k = 5,cluster.only = F)
#test
kc_demographics$cluster <- as.double(res.pam$clustering)
#kc_demographics$cluster <- as.factor(res.pam$clustering)
#kc_demographics$cluster=factor(dataCSV$cluster,
#                           levels=c(1,3,2),
#                           labels=c("low","mid","best"),
#                           ordered=T)
head(kc_demographics)
kc_demographics %>% glimpse(width = 100)
table(kc_demographics$cluster,
exclude = 'nothing')
summary(kc_demographics$cluster)
summary_income <- aggregate(data=kc_demographics, med_income~cluster, median)
summary_english <- aggregate(data=kc_demographics, p_e_less~cluster, mean)
summary_poc <- aggregate(data=kc_demographics, percent_poc~cluster, mean)
esj_summary <- summary_income %>% inner_join(summary_english) %>% inner_join(summary_poc)
esj_summary[order(esj_summary$percent_poc),]
kc_demographics$cluster <- factor(kc_demographics$cluster,
levels=c(1,5,2,3,4),
labels=c("low income diverse",
"low income middle diverse",
"middle income middle diverse",
"high income low diversity",
"middle income low diversity"),
ordered=T)
kc_demographics
ESJ_map <- kc_demographics %>% mutate(esj_score = as.integer(cluster)) %>%
st_sf() %>%
ggplot(
aes(fill = esj_score)) +
geom_sf() +
scale_fill_viridis()
install.packages("viridis")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(sf)
library(viridis)
ESJ_map <- kc_demographics %>% mutate(esj_score = as.integer(cluster)) %>%
st_sf() %>%
ggplot(
aes(fill = esj_score)) +
geom_sf() +
scale_fill_viridis()
ESJ_map
roadsproj=read.csv("Geographic Data Roads Projects.csv")
baseMEANs=ggplot(DFtoPlot, aes(x=Portfolio.Category,
y=value)) +
theme_classic()
pointMEANS=baseMEANs + geom_point(stat="summary") + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
pointMEANS
baseMEANs=ggplot(DFtoPlot, aes(x=Portfolio.Category,
y=value)) +
theme_classic()
pointMEANS=baseMEANs + geom_point(stat="summary") + labs(title = "Mean Gate Schedule Variance", caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
pointMEANS
baseMEANs=ggplot(DFtoPlot, aes(x=Portfolio.Category,
y=value)) +
theme_classic()
pointMEANS=baseMEANs + geom_point(stat="summary") + labs(title = "Average Gate Schedule Variance", caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
pointMEANS
baseMEANs=ggplot(DFtoPlot, aes(x=Portfolio.Category,
y=value)) +
theme_classic()
pointMEANS=baseMEANs + geom_point(stat="summary") + labs(title = "Average Gate Schedule Variance for Active Projects", caption = sourceText) + xlab("Unit") + ylab("Average Schedule Variance(days) for Gate Dates") + theme(plot.title = element_text(hjust = 0.5))
pointMEANS
titleText = 'Gate Schedule Variance for Active Projects'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot, aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
titleText = 'Gate Schedule Variance for Active Projects'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot[DFtoPlot$Diff3!=2033,], aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
View(DFtoPlot)
View(DFtoPlot)
titleText = 'Gate Schedule Variance for Active Projects'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot[DFtoPlot$variable!=2033,], aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
titleText = 'Gate Schedule Variance for Active Projects'
sourceText = 'King County Road Services Division'
baseMEANs= ggplot(DFtoPlot[DFtoPlot$value!=2033,], aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText)) +
theme_classic()
jitterMEANs= baseMEANs + geom_jitter(colour="blue",
alpha=0.2)
jitterMEANs=jitterMEANs + geom_point(stat="summary") +
geom_errorbar(stat="summary")
jitterMEANs + scale_y_continuous(breaks = c(100, 250, 500),labels = scales::comma) + labs(title = titleText, caption = sourceText) + xlab("Unit") + ylab("Gate Schedule Variance of Active Projects") + theme(plot.title = element_text(hjust = 0.5))
roadsproj=read.csv("Geographic Data Roads Projects.csv")
roadsproj=read.csv("https://github.com/bbart86/PUBPOL-543-King-County-Projects-/raw/main/Geographic%20Data%20Roads%20Projects.csv")
kc_demographics <- read_rds("kc_demographics.rds")
#glimpse(kc_demographics, width = 100)
head(kc_demographics)
roadsproj=read.csv("https://github.com/bbart86/PUBPOL-543-King-County-Projects-/raw/main/Geographic%20Data%20Roads%20Projects.csv")
roadsproj=read.csv("Geographic Data Roads Projects.csv")
roadsproj[complete.cases(roadsproj),]
roadssub=roadsproj[complete.cases(roadsproj),]
View(roadssub)
roadssub=roadsproj[complete.cases(roadsproj$Latitude),]
RoadsMap= ESJ_map + geom_sf(data=roadssub,
aes(x = Longitude, y = Latitude),
color=NA)
colMap
roadssub <- read_rds("kc_demographics.rds")
RoadsMap= ESJ_map + geom_sf(data=roadssub,
aes(x = Longitude, y = Latitude),
color=NA)
colMap
roadsproj=read.csv("Geographic Data Roads Projects.csv")
roadssub=roadsproj[complete.cases(roadsproj$Latitude),]
roadssub <- read_rds("kc_demographics.rds")
YOUR_MAP= ESJ_map + geom_sf(data=roadssub,
aes(x = Longitude, y = Latitude),
color=NA)
colMap
YOUR_MAP == Roads Active Projects
install.packages("leaflet")
install.packages("mapview")
install.packages("tmap")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(sf)
library(viridis)
library(leaflet)
library(mapview)
library(tmap)
RoadsMap= ESJ_map + geom_sf(data=roadssub,
aes(x = Longitude, y = Latitude),
color=NA)
colMap
roadsproj <- read_rds("kc_demographics.rds")
roadsproj=read.csv("Geographic Data Roads Projects.csv")
roadsproj <- read_rds("kc_demographics.rds")
roadssub=roadsproj[complete.cases(roadsproj$Latitude),]
roadssub=roadsproj[complete.cases(roadsproj$Latitude),]
roadsproj=read.csv("Geographic Data Roads Projects.csv")
roadssub=roadsproj[complete.cases(roadsproj$Latitude),]
RoadsMap = ESJ_map + geom_sf(data = roadssub, aes(x = Longitude, y = Latitude), color=NA)
RoadsMap = ESJ_map + geom_sf(data = roadssub, aes(x = Latitude, y = Longitude), color=NA)
baseINV=ggplot(DFtoPlot[DFtoPlot$value!=2033,], aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText) +
theme_classic()
#point for each stat
MINs=baseINV + geom_point(stat="summary",fun='max',size=3,)
baseINV=ggplot(DFtoPlot[DFtoPlot$value!=2033,], aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText) +
theme_classic()
#point for each stat
MINs=baseINV + geom_point(stat="summary",fun='max',size=3,)
baseINV=ggplot(DFtoPlot[DFtoPlot$value!=2033,], aes(title=titleText, x=Portfolio.Category,
y=value, caption = sourceText) +
theme_classic()
#point for each stat
MINs=baseINV + geom_point(stat="summary",fun='max',size=3,)
RoadsMap = ESJ_map + geom_sf(data = roadssub, aes(x = "Longitude", y = "Latitude"), color=NA)
RoadsMap = ESJ_map + geom_sf(data = roadssub, aes(x =Longitude, y = Latitude), color=NA)
RoadsMap = ESJ_map + geom_sf(data = roadssub, aes(x =Longitude, y = Latitude), color=NA)
YOUR_MAP == "Roads_Map"
YOUR_DATA == "roadssub"
YOUR_MAP == "Roads_Map"
YOUR_DATA == roadssub
YOUR_MAP == "Roads_Map"
YOUR_DATA == roadssub
YOUR_MAP == "Roads_Map"
YOUR_MAP = ESJ_map + geom_sf(data = roadssub, aes(x =Longitude, y = Latitude), color=NA)
Roads_Map= ESJ_map + geom_sf(data = roadssub, aes(x=Longitude, y=Latitude), color=NA)
Roads_Map= ESJ_map + geom_sf(data = roadssub, aes(x=Latitude, y=Longitude), color=NA)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(sf)
library(viridis)
library(leaflet)
library(mapview)
library(tmap)
kc_demographics <- read_rds("kc_demographics.rds")
kc_demographics <- read_rds("kc_demographics.rds")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cluster)
library(sf)
library(viridis)
library(leaflet)
library(mapview)
library(tmap)
kc_demographics <- read_rds("kc_demographics.rds")
kc_demographics <- read_rds("kc_demographics(3).rds")
kc_demographics <- read_rds("kc_demographics (3).rds")
#glimpse(kc_demographics, width = 100)
head(kc_demographics)
set.seed(23994)
vars <- c('med_income', 'p_e_less', 'percent_poc')#variables needed
equity_matrix <- cluster::daisy(kc_demographics[,vars])
res.pam <- cluster::pam(x=equity_matrix,k = 5,cluster.only = F)
#test
kc_demographics$cluster <- as.double(res.pam$clustering)
#kc_demographics$cluster <- as.factor(res.pam$clustering)
#kc_demographics$cluster=factor(dataCSV$cluster,
#                           levels=c(1,3,2),
#                           labels=c("low","mid","best"),
#                           ordered=T)
head(kc_demographics)
kc_demographics %>% glimpse(width = 100)
table(kc_demographics$cluster,
exclude = 'nothing')
summary(kc_demographics$cluster)
summary_income <- aggregate(data=kc_demographics, med_income~cluster, median)
summary_english <- aggregate(data=kc_demographics, p_e_less~cluster, mean)
summary_poc <- aggregate(data=kc_demographics, percent_poc~cluster, mean)
esj_summary <- summary_income %>% inner_join(summary_english) %>% inner_join(summary_poc)
esj_summary[order(esj_summary$percent_poc),]
kc_demographics$cluster <- factor(kc_demographics$cluster,
levels=c(1,5,2,3,4),
labels=c("low income diverse",
"low income middle diverse",
"middle income middle diverse",
"high income low diversity",
"middle income low diversity"),
ordered=T)
kc_demographics
ESJ_map <- kc_demographics %>% mutate(esj_score = as.integer(cluster)) %>%
st_sf() %>%
ggplot(
aes(fill = esj_score)) +
geom_sf() +
scale_fill_viridis()
ESJ_map
roadsproj=read.csv("Geographic Data Roads Projects.csv")
roadssub=roadsproj[complete.cases(roadsproj$Latitude),]
roadsloc = st_as_sf(roadssub, coords = c("Latitude","Longitude"), crs = st_crs (mapWorldVars))
roadsloc = st_as_sf(roadssub, coords = c("Latitude","Longitude"), crs = st_crs (ESJ_map))
head(roadsloc)
Roads_Map= ESJ_map + geom_sf(data = roadsloc, aes(x=Latitude, y=Longitude), color=NA)
Roads_Map= ESJ_map + geom_sf(data = roadsloc)
Roads_Map= ESJ_map + geom_sf(data = roadsloc)
Roads_Map= ESJ_map + geom_sf(data = roadsloc)
Roads_Map
ESJ_map + geom_sf(data = roadsloc)
library(tidyverse)
df <- read.csv("RoadsProjectScheduleData.csv")
glimpse (df, width = 75)
df <- df %>% filter(!df$'Portfolio Category'%in%c ("Quick Response","Contingencies","Administrative","Maintenance Facilities"))
df <- df %>% filter(!df$Phase%in%c("OPERATIONS","LAND"))
library(tidyverse)
title_Text <- 'Total Number of Projects by Phase'
sourceText = 'King County Road Services Division'
lolliplot_All = base +
geom_segment(aes(y = 0,
yend = Count,
x = Phase,
xend = Phase),
color = "gray")  +
geom_point(size = 4, color = "Blue") +
geom_text(nudge_x=0.3,show.legend = FALSE) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(0, max)) +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank()) +
labs(title = title_Text, caption = sourceText) +
xlab(X_axis_title)
title_Text <- 'Total Number of Projects by Phase'
sourceText = 'King County Road Services Division'
lolliplot_All = base +
geom_segment(aes(y = 0,
yend = Count,
x = Phase,
xend = Phase),
color = "gray")  +
geom_point(size = 4, color = "Blue") +
geom_text(nudge_x=0.3,show.legend = FALSE) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(0, max)) +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank()) +
labs(title = title_Text, caption = sourceText) +
xlab("Project Phases")
lolliplot_All
df <- df %>% filter(!df$'Portfolio.Category'%in%c ("Quick Response","Contingencies","Administrative", "Maintenance Facilities"))
df <- df %>% filter(!df$Phase%in%c("OPERATIONS","LAND"))
df<- df %>% filter(!df$'ï..Phase'%in%c("OPERATIONS","LAND"))
phasesDF=as.data.frame(table(df$Phase))
names(phasesDF)=c("Phase", "Count")
phasesDF=as.data.frame(table(df$'ï..Phase'))
names(phasesDF)=c("Phase", "Count")
phasesDF$Phase <- factor(phasesDF$Phase, levels = c('PLANNING',
'PREDESIGN',
'DESIGN',
'IMPLEMENT',
'CLOSEOUT',
'HOLD',
'NOT SET'))
library(ggplot2)
base=ggplot(data=phasesDF, aes(x=Phase,y=Count))
base+geom_bar(stat = "identity")
df2 <- df %>% select(Phase, Master)
df2 <- df %>% select(Phase, Master)
df2 <- df %>% select(phasesDF, Master)
df2 <- df %>% select(Phase, Master)
df2 <- df %>% select(ï..Phase, Master)
base <- ggplot(data, aes(x = Phase,
y = Count,
label = Count)) +
theme_classic()
title_Text <- 'Total Number of Projects by Phase'
sourceText = 'King County Road Services Division'
lolliplot_All = base +
geom_segment(aes(y = 0,
yend = Count,
x = Phase,
xend = Phase),
color = "gray")  +
geom_point(size = 4, color = "Blue") +
geom_text(nudge_x=0.3,show.legend = FALSE) +
geom_hline(yintercept = 0) +
scale_y_continuous(limits = c(0, max)) +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank()) +
labs(title = title_Text, caption = sourceText) +
xlab("Project Phases")
lolliplot_All
lolliplot_All
